
Temperature Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001072  00001106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008a  0080008a  00001130  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef8  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d08  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013de  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  000053ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000813  00000000  00000000  000058c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b10  00000000  00000000  000060d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_1>
       8:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_2>
       c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0d 03 	call	0x61a	; 0x61a <main>
      8a:	0c 94 37 08 	jmp	0x106e	; 0x106e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
 */ 

#include "keypad.h"

void keypad_init(){
		pin_init(keypad_port,0,OUTPUT);
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	60 e0       	ldi	r22, 0x00	; 0
      96:	83 e4       	ldi	r24, 0x43	; 67
      98:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		pin_init(keypad_port,1,OUTPUT);
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	61 e0       	ldi	r22, 0x01	; 1
      a0:	83 e4       	ldi	r24, 0x43	; 67
      a2:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		pin_init(keypad_port,2,OUTPUT);
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	62 e0       	ldi	r22, 0x02	; 2
      aa:	83 e4       	ldi	r24, 0x43	; 67
      ac:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		pin_init(keypad_port,3,OUTPUT);
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	63 e0       	ldi	r22, 0x03	; 3
      b4:	83 e4       	ldi	r24, 0x43	; 67
      b6:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		
		pin_init(keypad_port,4,INPUT);
      ba:	41 e0       	ldi	r20, 0x01	; 1
      bc:	64 e0       	ldi	r22, 0x04	; 4
      be:	83 e4       	ldi	r24, 0x43	; 67
      c0:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		pin_init(keypad_port,5,INPUT);
      c4:	41 e0       	ldi	r20, 0x01	; 1
      c6:	65 e0       	ldi	r22, 0x05	; 5
      c8:	83 e4       	ldi	r24, 0x43	; 67
      ca:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		pin_init(keypad_port,6,INPUT);
      ce:	41 e0       	ldi	r20, 0x01	; 1
      d0:	66 e0       	ldi	r22, 0x06	; 6
      d2:	83 e4       	ldi	r24, 0x43	; 67
      d4:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		pin_init(keypad_port,7,INPUT);
      d8:	41 e0       	ldi	r20, 0x01	; 1
      da:	67 e0       	ldi	r22, 0x07	; 7
      dc:	83 e4       	ldi	r24, 0x43	; 67
      de:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
		
		
		internal_pullup_enable(keypad_port,4);
      e2:	64 e0       	ldi	r22, 0x04	; 4
      e4:	83 e4       	ldi	r24, 0x43	; 67
      e6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <internal_pullup_enable>
		internal_pullup_enable(keypad_port,5);
      ea:	65 e0       	ldi	r22, 0x05	; 5
      ec:	83 e4       	ldi	r24, 0x43	; 67
      ee:	0e 94 b5 05 	call	0xb6a	; 0xb6a <internal_pullup_enable>
		internal_pullup_enable(keypad_port,6);
      f2:	66 e0       	ldi	r22, 0x06	; 6
      f4:	83 e4       	ldi	r24, 0x43	; 67
      f6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <internal_pullup_enable>
		internal_pullup_enable(keypad_port,7);
      fa:	67 e0       	ldi	r22, 0x07	; 7
      fc:	83 e4       	ldi	r24, 0x43	; 67
      fe:	0e 94 b5 05 	call	0xb6a	; 0xb6a <internal_pullup_enable>
     102:	08 95       	ret

00000104 <keypad_read>:
}

uint8 keypad_read(){
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	60 97       	sbiw	r28, 0x10	; 16
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     124:	80 e1       	ldi	r24, 0x10	; 16
     126:	e2 e6       	ldi	r30, 0x62	; 98
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	de 01       	movw	r26, r28
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	01 90       	ld	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	8a 95       	dec	r24
     134:	e1 f7       	brne	.-8      	; 0x12e <keypad_read+0x2a>
	uint8 return_value=0xff;
	uint8 check=1;
	for (int i=0;i<4;i++){
     136:	c1 2c       	mov	r12, r1
     138:	d1 2c       	mov	r13, r1
}

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
	uint8 check=1;
     13a:	ff 24       	eor	r15, r15
     13c:	f3 94       	inc	r15
		internal_pullup_enable(keypad_port,7);
}

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
     13e:	ee 24       	eor	r14, r14
     140:	ea 94       	dec	r14
	uint8 check=1;
	for (int i=0;i<4;i++){
     142:	3e c0       	rjmp	.+124    	; 0x1c0 <keypad_read+0xbc>
		pin_write(keypad_port,0,HIGH);
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	83 e4       	ldi	r24, 0x43	; 67
     14a:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
		pin_write(keypad_port,1,HIGH);
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	83 e4       	ldi	r24, 0x43	; 67
     154:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
		pin_write(keypad_port,2,HIGH);
     158:	41 e0       	ldi	r20, 0x01	; 1
     15a:	62 e0       	ldi	r22, 0x02	; 2
     15c:	83 e4       	ldi	r24, 0x43	; 67
     15e:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
		pin_write(keypad_port,3,HIGH);
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	63 e0       	ldi	r22, 0x03	; 3
     166:	83 e4       	ldi	r24, 0x43	; 67
     168:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
		pin_write(keypad_port,i,LOW);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	6c 2d       	mov	r22, r12
     170:	83 e4       	ldi	r24, 0x43	; 67
     172:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
		for (int j=0;j<4;j++){
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	1a c0       	rjmp	.+52     	; 0x1b0 <keypad_read+0xac>
			check = pin_read(keypad_port,j+4);
     17c:	64 e0       	ldi	r22, 0x04	; 4
     17e:	60 0f       	add	r22, r16
     180:	83 e4       	ldi	r24, 0x43	; 67
     182:	0e 94 a1 04 	call	0x942	; 0x942 <pin_read>
     186:	f8 2e       	mov	r15, r24
			if (check == 0){
     188:	81 11       	cpse	r24, r1
     18a:	10 c0       	rjmp	.+32     	; 0x1ac <keypad_read+0xa8>
				return_value = characters[i][j];
     18c:	c6 01       	movw	r24, r12
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	2c 0f       	add	r18, r28
     19c:	3d 1f       	adc	r19, r29
     19e:	82 0f       	add	r24, r18
     1a0:	93 1f       	adc	r25, r19
     1a2:	fc 01       	movw	r30, r24
     1a4:	e0 0f       	add	r30, r16
     1a6:	f1 1f       	adc	r31, r17
     1a8:	e0 80       	ld	r14, Z
				break;
     1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <keypad_read+0xb2>
		pin_write(keypad_port,0,HIGH);
		pin_write(keypad_port,1,HIGH);
		pin_write(keypad_port,2,HIGH);
		pin_write(keypad_port,3,HIGH);
		pin_write(keypad_port,i,LOW);
		for (int j=0;j<4;j++){
     1ac:	0f 5f       	subi	r16, 0xFF	; 255
     1ae:	1f 4f       	sbci	r17, 0xFF	; 255
     1b0:	04 30       	cpi	r16, 0x04	; 4
     1b2:	11 05       	cpc	r17, r1
     1b4:	1c f3       	brlt	.-58     	; 0x17c <keypad_read+0x78>
				return_value = characters[i][j];
				break;
			}

			}
			if (check ==0){
     1b6:	ff 20       	and	r15, r15
     1b8:	41 f0       	breq	.+16     	; 0x1ca <keypad_read+0xc6>

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
	uint8 check=1;
	for (int i=0;i<4;i++){
     1ba:	3f ef       	ldi	r19, 0xFF	; 255
     1bc:	c3 1a       	sub	r12, r19
     1be:	d3 0a       	sbc	r13, r19
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	c8 16       	cp	r12, r24
     1c4:	d1 04       	cpc	r13, r1
     1c6:	0c f4       	brge	.+2      	; 0x1ca <keypad_read+0xc6>
     1c8:	bd cf       	rjmp	.-134    	; 0x144 <keypad_read+0x40>
		}
		
		
		return return_value;
			
     1ca:	8e 2d       	mov	r24, r14
     1cc:	60 96       	adiw	r28, 0x10	; 16
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret

000001ea <send_falling_edge>:

}


static void send_falling_edge(){
	pin_write(CONTROL_PORT,ENABLE_PIN,HIGH);
     1ea:	41 e0       	ldi	r20, 0x01	; 1
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	82 e4       	ldi	r24, 0x42	; 66
     1f0:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	8f e9       	ldi	r24, 0x9F	; 159
     1f6:	9f e0       	ldi	r25, 0x0F	; 15
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <send_falling_edge+0xe>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <send_falling_edge+0x14>
     1fe:	00 00       	nop
	_delay_ms(2);
	pin_write(CONTROL_PORT,ENABLE_PIN,LOW);
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	82 e4       	ldi	r24, 0x42	; 66
     206:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
     20a:	8f e9       	ldi	r24, 0x9F	; 159
     20c:	9f e0       	ldi	r25, 0x0F	; 15
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <send_falling_edge+0x24>
     212:	00 c0       	rjmp	.+0      	; 0x214 <send_falling_edge+0x2a>
     214:	00 00       	nop
     216:	08 95       	ret

00000218 <lcd_send_cmd>:
	_delay_ms(2);
}

void lcd_send_cmd(char cmd){
     218:	cf 93       	push	r28
     21a:	c8 2f       	mov	r28, r24
	port_write(DATA_PORT,cmd);
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
	send_falling_edge();
	
	#elif defined FOUR_BIT_MODE
	port_nibble_write(DATA_PORT,DATA_NIBBLE,cmd>>4);
     21c:	48 2f       	mov	r20, r24
     21e:	42 95       	swap	r20
     220:	4f 70       	andi	r20, 0x0F	; 15
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	84 e4       	ldi	r24, 0x44	; 68
     226:	0e 94 62 05 	call	0xac4	; 0xac4 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	62 e0       	ldi	r22, 0x02	; 2
     22e:	82 e4       	ldi	r24, 0x42	; 66
     230:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
	send_falling_edge();
     234:	0e 94 f5 00 	call	0x1ea	; 0x1ea <send_falling_edge>
	port_nibble_write(DATA_PORT,DATA_NIBBLE,cmd);
     238:	4c 2f       	mov	r20, r28
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	84 e4       	ldi	r24, 0x44	; 68
     23e:	0e 94 62 05 	call	0xac4	; 0xac4 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	62 e0       	ldi	r22, 0x02	; 2
     246:	82 e4       	ldi	r24, 0x42	; 66
     248:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
	send_falling_edge();
     24c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <send_falling_edge>
     250:	8f ec       	ldi	r24, 0xCF	; 207
     252:	97 e0       	ldi	r25, 0x07	; 7
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <lcd_send_cmd+0x3c>
     258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_send_cmd+0x42>
     25a:	00 00       	nop
	_delay_ms(1);
	#endif
}
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <lcd_init>:
     260:	2f ef       	ldi	r18, 0xFF	; 255
     262:	81 ee       	ldi	r24, 0xE1	; 225
     264:	94 e0       	ldi	r25, 0x04	; 4
     266:	21 50       	subi	r18, 0x01	; 1
     268:	80 40       	sbci	r24, 0x00	; 0
     26a:	90 40       	sbci	r25, 0x00	; 0
     26c:	e1 f7       	brne	.-8      	; 0x266 <lcd_init+0x6>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x10>
     270:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(ENTRY_MODE_CMD);
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	port_nibble_init(DATA_PORT,DATA_NIBBLE,OUTPUT);
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	84 e4       	ldi	r24, 0x44	; 68
     278:	0e 94 fe 04 	call	0x9fc	; 0x9fc <port_nibble_init>
	pin_init(CONTROL_PORT,ENABLE_PIN,OUTPUT);
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	82 e4       	ldi	r24, 0x42	; 66
     282:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
	pin_init(CONTROL_PORT,READ_WRITE_PIN,OUTPUT);
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	82 e4       	ldi	r24, 0x42	; 66
     28c:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
	pin_init(CONTROL_PORT,REGISTER_SELECT_PIN,OUTPUT);
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	62 e0       	ldi	r22, 0x02	; 2
     294:	82 e4       	ldi	r24, 0x42	; 66
     296:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
	
	pin_write(CONTROL_PORT,READ_WRITE_PIN,LOW);
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 e4       	ldi	r24, 0x42	; 66
     2a0:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
	
	lcd_send_cmd(RETURN_HOME_CMD);
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     2aa:	8f e1       	ldi	r24, 0x1F	; 31
     2ac:	9e e4       	ldi	r25, 0x4E	; 78
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x4e>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x54>
     2b4:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(FOUR_BIT_CMD);
     2b6:	88 e2       	ldi	r24, 0x28	; 40
     2b8:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     2bc:	8f ec       	ldi	r24, 0xCF	; 207
     2be:	97 e0       	ldi	r25, 0x07	; 7
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_init+0x60>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_init+0x66>
     2c6:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(CURSOR_ON_DISPLAY_ON_CMD);
     2c8:	8e e0       	ldi	r24, 0x0E	; 14
     2ca:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     2ce:	8f ec       	ldi	r24, 0xCF	; 207
     2d0:	97 e0       	ldi	r25, 0x07	; 7
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_init+0x72>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <lcd_init+0x78>
     2d8:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(CLEAR_SCREEN_CMD);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     2e0:	8f e1       	ldi	r24, 0x1F	; 31
     2e2:	9e e4       	ldi	r25, 0x4E	; 78
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_init+0x84>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_init+0x8a>
     2ea:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(ENTRY_MODE_CMD);
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     2f2:	8f ec       	ldi	r24, 0xCF	; 207
     2f4:	97 e0       	ldi	r25, 0x07	; 7
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0x96>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0x9c>
     2fc:	00 00       	nop
     2fe:	08 95       	ret

00000300 <lcd_send_char>:
	_delay_ms(1);
	#endif
}


void lcd_send_char(char data){
     300:	cf 93       	push	r28
     302:	c8 2f       	mov	r28, r24
	port_write(DATA_PORT,data);
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
	send_falling_edge();
	
	#elif defined FOUR_BIT_MODE
	port_nibble_write(DATA_PORT,DATA_NIBBLE,data>>4);
     304:	48 2f       	mov	r20, r24
     306:	42 95       	swap	r20
     308:	4f 70       	andi	r20, 0x0F	; 15
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	84 e4       	ldi	r24, 0x44	; 68
     30e:	0e 94 62 05 	call	0xac4	; 0xac4 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	62 e0       	ldi	r22, 0x02	; 2
     316:	82 e4       	ldi	r24, 0x42	; 66
     318:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
	send_falling_edge();
     31c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <send_falling_edge>
	port_nibble_write(DATA_PORT,DATA_NIBBLE,data);
     320:	4c 2f       	mov	r20, r28
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	84 e4       	ldi	r24, 0x44	; 68
     326:	0e 94 62 05 	call	0xac4	; 0xac4 <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	82 e4       	ldi	r24, 0x42	; 66
     330:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
	send_falling_edge();
     334:	0e 94 f5 00 	call	0x1ea	; 0x1ea <send_falling_edge>
     338:	8f ec       	ldi	r24, 0xCF	; 207
     33a:	97 e0       	ldi	r25, 0x07	; 7
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_send_char+0x3c>
     340:	00 c0       	rjmp	.+0      	; 0x342 <lcd_send_char+0x42>
     342:	00 00       	nop
	_delay_ms(1);
	#endif
	
	
}
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <lcd_send_string>:

void lcd_send_string(char* data){
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	ec 01       	movw	r28, r24
	while(*data != '\0'){
     34e:	03 c0       	rjmp	.+6      	; 0x356 <lcd_send_string+0xe>
		lcd_send_char(*data);
     350:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
		data++;
     354:	21 96       	adiw	r28, 0x01	; 1
	
	
}

void lcd_send_string(char* data){
	while(*data != '\0'){
     356:	88 81       	ld	r24, Y
     358:	81 11       	cpse	r24, r1
     35a:	fa cf       	rjmp	.-12     	; 0x350 <lcd_send_string+0x8>
		lcd_send_char(*data);
		data++;
	}
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <lcd_clear_screen>:

void lcd_clear_screen(){
	lcd_send_cmd(CLEAR_SCREEN_CMD);
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     368:	8f e1       	ldi	r24, 0x1F	; 31
     36a:	9e e4       	ldi	r25, 0x4E	; 78
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_clear_screen+0xa>
     370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_clear_screen+0x10>
     372:	00 00       	nop
     374:	08 95       	ret

00000376 <lcd_move_cursor>:
	_delay_ms(10);
}

void lcd_move_cursor(char row, char column){
	char data;
	if(row<1 || row>2 || column<1 || column>16){
     376:	9f ef       	ldi	r25, 0xFF	; 255
     378:	98 0f       	add	r25, r24
     37a:	92 30       	cpi	r25, 0x02	; 2
     37c:	78 f4       	brcc	.+30     	; 0x39c <lcd_move_cursor+0x26>
     37e:	66 23       	and	r22, r22
     380:	69 f0       	breq	.+26     	; 0x39c <lcd_move_cursor+0x26>
     382:	61 31       	cpi	r22, 0x11	; 17
     384:	58 f4       	brcc	.+22     	; 0x39c <lcd_move_cursor+0x26>
		;
	}else if(row == 1){
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	29 f4       	brne	.+10     	; 0x394 <lcd_move_cursor+0x1e>
		data = 0x80 + column - 1;
		lcd_send_cmd(data);
     38a:	8f e7       	ldi	r24, 0x7F	; 127
     38c:	86 0f       	add	r24, r22
     38e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     392:	04 c0       	rjmp	.+8      	; 0x39c <lcd_move_cursor+0x26>
	}else{
		data = 0xc0 + column - 1;
		lcd_send_cmd(data);
     394:	8f eb       	ldi	r24, 0xBF	; 191
     396:	86 0f       	add	r24, r22
     398:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_cmd>
     39c:	8f ec       	ldi	r24, 0xCF	; 207
     39e:	97 e0       	ldi	r25, 0x07	; 7
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_move_cursor+0x2a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <lcd_move_cursor+0x30>
     3a6:	00 00       	nop
     3a8:	08 95       	ret

000003aa <led_init>:
 *  Author: himah
 */ 

#include "LED.h"
void led_init(uint8 port, uint8 pin){
	pin_init(port,pin,OUTPUT);
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
     3b0:	08 95       	ret

000003b2 <led_on>:
}

void led_on(uint8 port, uint8 pin){
	pin_write(port,pin,HIGH);
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
     3b8:	08 95       	ret

000003ba <led_off>:
}

void led_off(uint8 port, uint8 pin){
	pin_write(port,pin,LOW);
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	0e 94 31 04 	call	0x862	; 0x862 <pin_write>
     3c0:	08 95       	ret

000003c2 <lm35_init>:
#include "../../MCAL/DIO/DIO.h"
#include "../../MCAL/ADC/ADC.h"
#include "../../MCAL/EXTERNAL INTERRUPT/EXTERNAL_INTERRUPT.h"
#include "LM35.h"

void lm35_init(uint8 pin1, uint8 pin2, void (*thresh_callback) (void)){
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	d8 2f       	mov	r29, r24
     3cc:	c6 2f       	mov	r28, r22
     3ce:	8a 01       	movw	r16, r20
	pin_init(PORT_D,PIN2,INPUT);
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	84 e4       	ldi	r24, 0x44	; 68
     3d6:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
	global_interrupt_enable();
     3da:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <global_interrupt_enable>
	external_interrupt_callback(INT0_t,thresh_callback);
     3de:	b8 01       	movw	r22, r16
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 54 06 	call	0xca8	; 0xca8 <external_interrupt_callback>
	external_interrupt_enable(INT0_t,RISING_EDGE);
     3e6:	62 e0       	ldi	r22, 0x02	; 2
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <external_interrupt_enable>
	#if defined POSITIVE_ONLY
	pin_init(PORT_A ,pin1,INPUT);
	
	#else if defined NEGATIVE_POSITVE
	pin_init(PORT_A ,pin1,INPUT);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	6d 2f       	mov	r22, r29
     3f2:	81 e4       	ldi	r24, 0x41	; 65
     3f4:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
	pin_init(PORT_A ,pin2,INPUT);
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	6c 2f       	mov	r22, r28
     3fc:	81 e4       	ldi	r24, 0x41	; 65
     3fe:	0e 94 c1 03 	call	0x782	; 0x782 <pin_init>
	#endif
	

	adc_init();
     402:	0e 94 6f 03 	call	0x6de	; 0x6de <adc_init>
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	08 95       	ret

00000410 <lm35_read>:
uint16 lm35_read(uint8 mux){
	uint16 lm35_temp_value;
	lm35_temp_value = (adc_read(mux) * (REFRENCE_VOLTAGE / 1024) * 100);
     410:	0e 94 85 03 	call	0x70a	; 0x70a <adc_read>
     414:	bc 01       	movw	r22, r24
     416:	99 0f       	add	r25, r25
     418:	88 0b       	sbc	r24, r24
     41a:	99 0b       	sbc	r25, r25
     41c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__floatsisf>
     420:	2a e0       	ldi	r18, 0x0A	; 10
     422:	37 ed       	ldi	r19, 0xD7	; 215
     424:	43 e2       	ldi	r20, 0x23	; 35
     426:	5b e3       	ldi	r21, 0x3B	; 59
     428:	0e 94 7a 07 	call	0xef4	; 0xef4 <__mulsf3>
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	48 ec       	ldi	r20, 0xC8	; 200
     432:	52 e4       	ldi	r21, 0x42	; 66
     434:	0e 94 7a 07 	call	0xef4	; 0xef4 <__mulsf3>
     438:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixsfsi>

	return lm35_temp_value;
}
     43c:	cb 01       	movw	r24, r22
     43e:	08 95       	ret

00000440 <reset_thresh>:

}



void reset_thresh(){
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	00 d0       	rcall	.+0      	; 0x448 <reset_thresh+0x8>
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	31 ee       	ldi	r19, 0xE1	; 225
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	21 50       	subi	r18, 0x01	; 1
     456:	30 40       	sbci	r19, 0x00	; 0
     458:	80 40       	sbci	r24, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <reset_thresh+0x14>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <reset_thresh+0x1e>
     45e:	00 00       	nop
	_delay_ms(200);
	lcd_clear_screen();
     460:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_clear_screen>
	uint8 read_arr[3]={0};
     464:	19 82       	std	Y+1, r1	; 0x01
     466:	1a 82       	std	Y+2, r1	; 0x02
     468:	1b 82       	std	Y+3, r1	; 0x03
	uint8 iter=0;
	uint8 read_value;
	lcd_send_string("New thresh(c):");
     46a:	82 e7       	ldi	r24, 0x72	; 114
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_send_string>
	lcd_move_cursor(2,1);
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_move_cursor>
	read_value = keypad_read();
     47a:	0e 94 82 00 	call	0x104	; 0x104 <keypad_read>
     47e:	9f ef       	ldi	r25, 0xFF	; 255
     480:	21 ee       	ldi	r18, 0xE1	; 225
     482:	34 e0       	ldi	r19, 0x04	; 4
     484:	91 50       	subi	r25, 0x01	; 1
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	30 40       	sbci	r19, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <reset_thresh+0x44>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <reset_thresh+0x4e>
     48e:	00 00       	nop

void reset_thresh(){
	_delay_ms(200);
	lcd_clear_screen();
	uint8 read_arr[3]={0};
	uint8 iter=0;
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	17 c0       	rjmp	.+46     	; 0x4c2 <reset_thresh+0x82>
	lcd_send_string("New thresh(c):");
	lcd_move_cursor(2,1);
	read_value = keypad_read();
	_delay_ms(200);
	while(read_value != '=' && iter<3){
		if (read_value != 0xff){
     494:	8f 3f       	cpi	r24, 0xFF	; 255
     496:	51 f0       	breq	.+20     	; 0x4ac <reset_thresh+0x6c>
			read_arr[iter] = read_value;
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ec 0f       	add	r30, r28
     49e:	fd 1f       	adc	r31, r29
     4a0:	e1 0f       	add	r30, r17
     4a2:	f1 1d       	adc	r31, r1
     4a4:	80 83       	st	Z, r24
			lcd_send_char(read_value);
     4a6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
			iter++; 
     4aa:	1f 5f       	subi	r17, 0xFF	; 255
		}
		read_value = keypad_read();
     4ac:	0e 94 82 00 	call	0x104	; 0x104 <keypad_read>
     4b0:	9f ef       	ldi	r25, 0xFF	; 255
     4b2:	21 ee       	ldi	r18, 0xE1	; 225
     4b4:	34 e0       	ldi	r19, 0x04	; 4
     4b6:	91 50       	subi	r25, 0x01	; 1
     4b8:	20 40       	sbci	r18, 0x00	; 0
     4ba:	30 40       	sbci	r19, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <reset_thresh+0x76>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <reset_thresh+0x80>
     4c0:	00 00       	nop
	uint8 read_value;
	lcd_send_string("New thresh(c):");
	lcd_move_cursor(2,1);
	read_value = keypad_read();
	_delay_ms(200);
	while(read_value != '=' && iter<3){
     4c2:	8d 33       	cpi	r24, 0x3D	; 61
     4c4:	11 f0       	breq	.+4      	; 0x4ca <reset_thresh+0x8a>
     4c6:	13 30       	cpi	r17, 0x03	; 3
     4c8:	28 f3       	brcs	.-54     	; 0x494 <reset_thresh+0x54>
		}
		read_value = keypad_read();
		_delay_ms(200);
		
	}
	if (read_arr[0] == '-'){
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	8d 32       	cpi	r24, 0x2D	; 45
     4ce:	79 f5       	brne	.+94     	; 0x52e <reset_thresh+0xee>
		if (iter == 3){
     4d0:	13 30       	cpi	r17, 0x03	; 3
     4d2:	c9 f4       	brne	.+50     	; 0x506 <reset_thresh+0xc6>
			temp_thresh = (read_arr[1]-48)*10 + (read_arr[2]-48);
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	c0 97       	sbiw	r24, 0x30	; 48
     4da:	9c 01       	movw	r18, r24
     4dc:	22 0f       	add	r18, r18
     4de:	33 1f       	adc	r19, r19
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	82 0f       	add	r24, r18
     4ee:	93 1f       	adc	r25, r19
     4f0:	2b 81       	ldd	r18, Y+3	; 0x03
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	20 53       	subi	r18, 0x30	; 48
     4f6:	31 09       	sbc	r19, r1
     4f8:	82 0f       	add	r24, r18
     4fa:	93 1f       	adc	r25, r19
     4fc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     500:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     504:	07 c0       	rjmp	.+14     	; 0x514 <reset_thresh+0xd4>
		}else{
			temp_thresh = read_arr[1]-48;
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	c0 97       	sbiw	r24, 0x30	; 48
     50c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     510:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		temp_thresh = 100 - temp_thresh;
     514:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     518:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     51c:	84 e6       	ldi	r24, 0x64	; 100
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	82 1b       	sub	r24, r18
     522:	93 0b       	sbc	r25, r19
     524:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     528:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     52c:	52 c0       	rjmp	.+164    	; 0x5d2 <reset_thresh+0x192>
	}else{
		if (iter == 3){
     52e:	13 30       	cpi	r17, 0x03	; 3
     530:	31 f5       	brne	.+76     	; 0x57e <reset_thresh+0x13e>
			temp_thresh = (read_arr[0]-48)*100 + (read_arr[1]-48)*10 + (read_arr[2]-48) ;
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	c0 97       	sbiw	r24, 0x30	; 48
     536:	24 e6       	ldi	r18, 0x64	; 100
     538:	28 9f       	mul	r18, r24
     53a:	a0 01       	movw	r20, r0
     53c:	29 9f       	mul	r18, r25
     53e:	50 0d       	add	r21, r0
     540:	11 24       	eor	r1, r1
     542:	2a 81       	ldd	r18, Y+2	; 0x02
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	c9 01       	movw	r24, r18
     548:	c0 97       	sbiw	r24, 0x30	; 48
     54a:	bc 01       	movw	r22, r24
     54c:	66 0f       	add	r22, r22
     54e:	77 1f       	adc	r23, r23
     550:	9c 01       	movw	r18, r24
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	cb 01       	movw	r24, r22
     560:	82 0f       	add	r24, r18
     562:	93 1f       	adc	r25, r19
     564:	84 0f       	add	r24, r20
     566:	95 1f       	adc	r25, r21
     568:	2b 81       	ldd	r18, Y+3	; 0x03
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	20 53       	subi	r18, 0x30	; 48
     56e:	31 09       	sbc	r19, r1
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19
     574:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     578:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     57c:	20 c0       	rjmp	.+64     	; 0x5be <reset_thresh+0x17e>
		}else if(iter == 2){
     57e:	12 30       	cpi	r17, 0x02	; 2
     580:	c1 f4       	brne	.+48     	; 0x5b2 <reset_thresh+0x172>
			temp_thresh = (read_arr[0]-48)*10 +(read_arr[1]-48) ;
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	c0 97       	sbiw	r24, 0x30	; 48
     586:	9c 01       	movw	r18, r24
     588:	22 0f       	add	r18, r18
     58a:	33 1f       	adc	r19, r19
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	20 53       	subi	r18, 0x30	; 48
     5a2:	31 09       	sbc	r19, r1
     5a4:	82 0f       	add	r24, r18
     5a6:	93 1f       	adc	r25, r19
     5a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     5b0:	06 c0       	rjmp	.+12     	; 0x5be <reset_thresh+0x17e>
		}else{
			temp_thresh = read_arr[0]-48 ;
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	c0 97       	sbiw	r24, 0x30	; 48
     5b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		temp_thresh += 100;
     5be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5c6:	8c 59       	subi	r24, 0x9C	; 156
     5c8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	08 95       	ret

000005e0 <thresh_comp>:


void thresh_comp(uint16 temp,uint16 temp_thresh){
		if (temp_thresh>100){
     5e0:	65 36       	cpi	r22, 0x65	; 101
     5e2:	71 05       	cpc	r23, r1
     5e4:	6c f0       	brlt	.+26     	; 0x600 <thresh_comp+0x20>
			if(temp > temp_thresh){
     5e6:	68 17       	cp	r22, r24
     5e8:	79 07       	cpc	r23, r25
     5ea:	2c f4       	brge	.+10     	; 0x5f6 <thresh_comp+0x16>
				led_on(PORT_A,RED_PIN);
     5ec:	65 e0       	ldi	r22, 0x05	; 5
     5ee:	81 e4       	ldi	r24, 0x41	; 65
     5f0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <led_on>
     5f4:	08 95       	ret
			}
			else{
				led_off(PORT_A,RED_PIN);
     5f6:	65 e0       	ldi	r22, 0x05	; 5
     5f8:	81 e4       	ldi	r24, 0x41	; 65
     5fa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <led_off>
     5fe:	08 95       	ret
			}
		}
		else{
			if(temp < temp_thresh){
     600:	86 17       	cp	r24, r22
     602:	97 07       	cpc	r25, r23
     604:	2c f4       	brge	.+10     	; 0x610 <thresh_comp+0x30>
				led_on(PORT_A,RED_PIN);
     606:	65 e0       	ldi	r22, 0x05	; 5
     608:	81 e4       	ldi	r24, 0x41	; 65
     60a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <led_on>
     60e:	08 95       	ret
			}
			else{
				led_off(PORT_A,RED_PIN);
     610:	65 e0       	ldi	r22, 0x05	; 5
     612:	81 e4       	ldi	r24, 0x41	; 65
     614:	0e 94 dd 01 	call	0x3ba	; 0x3ba <led_off>
     618:	08 95       	ret

0000061a <main>:
void reset_thresh();
void thresh_comp(uint16 temp,uint16 temp_thresh);
volatile uint16 temp_thresh = 256;
int main(void)
{
    lcd_init();
     61a:	0e 94 30 01 	call	0x260	; 0x260 <lcd_init>
	keypad_init();
     61e:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>

	
	lm35_init(PIN0,PIN2,reset_thresh);
     622:	40 e2       	ldi	r20, 0x20	; 32
     624:	52 e0       	ldi	r21, 0x02	; 2
     626:	62 e0       	ldi	r22, 0x02	; 2
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lm35_init>
	led_init(PORT_A,PIN5);
     62e:	65 e0       	ldi	r22, 0x05	; 5
     630:	81 e4       	ldi	r24, 0x41	; 65
     632:	0e 94 d5 01 	call	0x3aa	; 0x3aa <led_init>
	
	uint16 temp;
	uint8 char1,char2,char3;
    while (1) 
    {
			lcd_clear_screen();
     636:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_clear_screen>
			lcd_send_string("Temp(c)=");
     63a:	81 e8       	ldi	r24, 0x81	; 129
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_send_string>
			temp = lm35_read(16);
     642:	80 e1       	ldi	r24, 0x10	; 16
     644:	0e 94 08 02 	call	0x410	; 0x410 <lm35_read>
     648:	ec 01       	movw	r28, r24
			thresh_comp(temp , temp_thresh);
     64a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     64e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     652:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <thresh_comp>
			if (temp>=100){
     656:	c4 36       	cpi	r28, 0x64	; 100
     658:	d1 05       	cpc	r29, r1
     65a:	04 f1       	brlt	.+64     	; 0x69c <main+0x82>
				temp -= 100;
     65c:	ce 01       	movw	r24, r28
     65e:	84 56       	subi	r24, 0x64	; 100
     660:	91 09       	sbc	r25, r1
				char1 = temp/100;
     662:	64 e6       	ldi	r22, 0x64	; 100
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     66a:	26 2f       	mov	r18, r22
				char2 = (temp%100)/10;
     66c:	6a e0       	ldi	r22, 0x0A	; 10
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     674:	c6 2f       	mov	r28, r22
     676:	d8 2f       	mov	r29, r24
     678:	16 2f       	mov	r17, r22
				char3 = (temp%100)%10;
				if (char1 != 0){
     67a:	22 23       	and	r18, r18
     67c:	21 f0       	breq	.+8      	; 0x686 <main+0x6c>
					lcd_send_char(char1+48);
     67e:	80 e3       	ldi	r24, 0x30	; 48
     680:	82 0f       	add	r24, r18
     682:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
				}
				if (char2 != 0){
     686:	11 23       	and	r17, r17
     688:	21 f0       	breq	.+8      	; 0x692 <main+0x78>
					lcd_send_char(char2 + 48);
     68a:	80 e3       	ldi	r24, 0x30	; 48
     68c:	8c 0f       	add	r24, r28
     68e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
				}
				lcd_send_char(char3 + 48);
     692:	80 e3       	ldi	r24, 0x30	; 48
     694:	8d 0f       	add	r24, r29
     696:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
     69a:	17 c0       	rjmp	.+46     	; 0x6ca <main+0xb0>
				
				}else{
				temp  = 100 - temp;
     69c:	84 e6       	ldi	r24, 0x64	; 100
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	8c 1b       	sub	r24, r28
     6a2:	9d 0b       	sbc	r25, r29
				char1 = '-';
				char2 = temp/10;
     6a4:	6a e0       	ldi	r22, 0x0A	; 10
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	0e 94 0f 08 	call	0x101e	; 0x101e <__divmodhi4>
     6ac:	c6 2f       	mov	r28, r22
     6ae:	d8 2f       	mov	r29, r24
				char3 = temp%10;
				lcd_send_char(char1);
     6b0:	8d e2       	ldi	r24, 0x2D	; 45
     6b2:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
				if (char2 != 0){
     6b6:	cc 23       	and	r28, r28
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <main+0xa8>
					lcd_send_char(char2 + 48);
     6ba:	80 e3       	ldi	r24, 0x30	; 48
     6bc:	8c 0f       	add	r24, r28
     6be:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
				}
				lcd_send_char(char3 + 48);
     6c2:	80 e3       	ldi	r24, 0x30	; 48
     6c4:	8d 0f       	add	r24, r29
     6c6:	0e 94 80 01 	call	0x300	; 0x300 <lcd_send_char>
     6ca:	2f ef       	ldi	r18, 0xFF	; 255
     6cc:	89 e6       	ldi	r24, 0x69	; 105
     6ce:	98 e1       	ldi	r25, 0x18	; 24
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	80 40       	sbci	r24, 0x00	; 0
     6d4:	90 40       	sbci	r25, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0xb6>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0xc0>
     6da:	00 00       	nop
     6dc:	ac cf       	rjmp	.-168    	; 0x636 <main+0x1c>

000006de <adc_init>:
		/*start conversion*/
		SET_BIT(ADCSRA_REG,ADSC);
}

void adc_set_callback( void (*callback) (void) ){
	adc_callback = callback;
     6de:	87 b1       	in	r24, 0x07	; 7
     6e0:	8f 7b       	andi	r24, 0xBF	; 191
     6e2:	87 b9       	out	0x07, r24	; 7
     6e4:	87 b1       	in	r24, 0x07	; 7
     6e6:	8f 77       	andi	r24, 0x7F	; 127
     6e8:	87 b9       	out	0x07, r24	; 7
     6ea:	86 b1       	in	r24, 0x06	; 6
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	86 b9       	out	0x06, r24	; 6
     6f0:	87 b1       	in	r24, 0x07	; 7
     6f2:	8f 7d       	andi	r24, 0xDF	; 223
     6f4:	87 b9       	out	0x07, r24	; 7
     6f6:	86 b1       	in	r24, 0x06	; 6
     6f8:	8e 7f       	andi	r24, 0xFE	; 254
     6fa:	86 b9       	out	0x06, r24	; 6
     6fc:	86 b1       	in	r24, 0x06	; 6
     6fe:	82 60       	ori	r24, 0x02	; 2
     700:	86 b9       	out	0x06, r24	; 6
     702:	86 b1       	in	r24, 0x06	; 6
     704:	84 60       	ori	r24, 0x04	; 4
     706:	86 b9       	out	0x06, r24	; 6
     708:	08 95       	ret

0000070a <adc_read>:
     70a:	97 b1       	in	r25, 0x07	; 7
     70c:	90 7e       	andi	r25, 0xE0	; 224
     70e:	97 b9       	out	0x07, r25	; 7
     710:	97 b1       	in	r25, 0x07	; 7
     712:	89 2b       	or	r24, r25
     714:	87 b9       	out	0x07, r24	; 7
     716:	86 b1       	in	r24, 0x06	; 6
     718:	80 64       	ori	r24, 0x40	; 64
     71a:	86 b9       	out	0x06, r24	; 6
     71c:	34 9b       	sbis	0x06, 4	; 6
     71e:	fe cf       	rjmp	.-4      	; 0x71c <adc_read+0x12>
     720:	86 b1       	in	r24, 0x06	; 6
     722:	80 61       	ori	r24, 0x10	; 16
     724:	86 b9       	out	0x06, r24	; 6
     726:	24 b1       	in	r18, 0x04	; 4
     728:	85 b1       	in	r24, 0x05	; 5
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	98 2f       	mov	r25, r24
     72e:	88 27       	eor	r24, r24
     730:	82 2b       	or	r24, r18
     732:	08 95       	ret

00000734 <__vector_16>:
}

ISR(ADC_vect){
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	2f 93       	push	r18
     740:	3f 93       	push	r19
     742:	4f 93       	push	r20
     744:	5f 93       	push	r21
     746:	6f 93       	push	r22
     748:	7f 93       	push	r23
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	ef 93       	push	r30
     754:	ff 93       	push	r31
	adc_callback();
     756:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <__data_end>
     75a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <__data_end+0x1>
     75e:	09 95       	icall
     760:	ff 91       	pop	r31
     762:	ef 91       	pop	r30
     764:	bf 91       	pop	r27
     766:	af 91       	pop	r26
     768:	9f 91       	pop	r25
     76a:	8f 91       	pop	r24
     76c:	7f 91       	pop	r23
     76e:	6f 91       	pop	r22
     770:	5f 91       	pop	r21
     772:	4f 91       	pop	r20
     774:	3f 91       	pop	r19
     776:	2f 91       	pop	r18
     778:	0f 90       	pop	r0
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	0f 90       	pop	r0
     77e:	1f 90       	pop	r1
     780:	18 95       	reti

00000782 <pin_init>:
		case PORT_D:
		if (nibble==LOW_NIBBLE){
			PORTD_REG &= 0xf0;
		}
		else{
			PORTD_REG &= 0x0f;
     782:	82 34       	cpi	r24, 0x42	; 66
     784:	19 f1       	breq	.+70     	; 0x7cc <pin_init+0x4a>
     786:	18 f4       	brcc	.+6      	; 0x78e <pin_init+0xc>
     788:	81 34       	cpi	r24, 0x41	; 65
     78a:	39 f0       	breq	.+14     	; 0x79a <pin_init+0x18>
     78c:	08 95       	ret
     78e:	83 34       	cpi	r24, 0x43	; 67
     790:	b1 f1       	breq	.+108    	; 0x7fe <pin_init+0x7c>
     792:	84 34       	cpi	r24, 0x44	; 68
     794:	09 f4       	brne	.+2      	; 0x798 <pin_init+0x16>
     796:	4c c0       	rjmp	.+152    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     798:	08 95       	ret
     79a:	41 11       	cpse	r20, r1
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <pin_init+0x32>
     79e:	2a b3       	in	r18, 0x1a	; 26
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <pin_init+0x28>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	6a 95       	dec	r22
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <pin_init+0x24>
     7ae:	82 2b       	or	r24, r18
     7b0:	8a bb       	out	0x1a, r24	; 26
     7b2:	08 95       	ret
     7b4:	2a b3       	in	r18, 0x1a	; 26
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <pin_init+0x3e>
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	6a 95       	dec	r22
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <pin_init+0x3a>
     7c4:	80 95       	com	r24
     7c6:	82 23       	and	r24, r18
     7c8:	8a bb       	out	0x1a, r24	; 26
     7ca:	08 95       	ret
     7cc:	41 11       	cpse	r20, r1
     7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <pin_init+0x64>
     7d0:	27 b3       	in	r18, 0x17	; 23
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <pin_init+0x5a>
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	6a 95       	dec	r22
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <pin_init+0x56>
     7e0:	82 2b       	or	r24, r18
     7e2:	87 bb       	out	0x17, r24	; 23
     7e4:	08 95       	ret
     7e6:	27 b3       	in	r18, 0x17	; 23
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <pin_init+0x70>
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	6a 95       	dec	r22
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <pin_init+0x6c>
     7f6:	80 95       	com	r24
     7f8:	82 23       	and	r24, r18
     7fa:	87 bb       	out	0x17, r24	; 23
     7fc:	08 95       	ret
     7fe:	41 11       	cpse	r20, r1
     800:	0b c0       	rjmp	.+22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     802:	24 b3       	in	r18, 0x14	; 20
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	6a 95       	dec	r22
     810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     812:	82 2b       	or	r24, r18
     814:	84 bb       	out	0x14, r24	; 20
     816:	08 95       	ret
     818:	24 b3       	in	r18, 0x14	; 20
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	6a 95       	dec	r22
     826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     828:	80 95       	com	r24
     82a:	82 23       	and	r24, r18
     82c:	84 bb       	out	0x14, r24	; 20
     82e:	08 95       	ret
     830:	41 11       	cpse	r20, r1
     832:	0b c0       	rjmp	.+22     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     834:	21 b3       	in	r18, 0x11	; 17
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	6a 95       	dec	r22
     842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	82 2b       	or	r24, r18
     846:	81 bb       	out	0x11, r24	; 17
     848:	08 95       	ret
     84a:	21 b3       	in	r18, 0x11	; 17
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	6a 95       	dec	r22
     858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     85a:	80 95       	com	r24
     85c:	82 23       	and	r24, r18
     85e:	81 bb       	out	0x11, r24	; 17
     860:	08 95       	ret

00000862 <pin_write>:
     862:	82 34       	cpi	r24, 0x42	; 66
     864:	19 f1       	breq	.+70     	; 0x8ac <pin_write+0x4a>
     866:	18 f4       	brcc	.+6      	; 0x86e <pin_write+0xc>
     868:	81 34       	cpi	r24, 0x41	; 65
     86a:	39 f0       	breq	.+14     	; 0x87a <pin_write+0x18>
     86c:	08 95       	ret
     86e:	83 34       	cpi	r24, 0x43	; 67
     870:	b1 f1       	breq	.+108    	; 0x8de <pin_write+0x7c>
     872:	84 34       	cpi	r24, 0x44	; 68
     874:	09 f4       	brne	.+2      	; 0x878 <pin_write+0x16>
     876:	4c c0       	rjmp	.+152    	; 0x910 <pin_write+0xae>
     878:	08 95       	ret
     87a:	41 30       	cpi	r20, 0x01	; 1
     87c:	59 f4       	brne	.+22     	; 0x894 <pin_write+0x32>
     87e:	2b b3       	in	r18, 0x1b	; 27
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <pin_write+0x28>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	6a 95       	dec	r22
     88c:	e2 f7       	brpl	.-8      	; 0x886 <pin_write+0x24>
     88e:	82 2b       	or	r24, r18
     890:	8b bb       	out	0x1b, r24	; 27
     892:	08 95       	ret
     894:	2b b3       	in	r18, 0x1b	; 27
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <pin_write+0x3e>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	6a 95       	dec	r22
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <pin_write+0x3a>
     8a4:	80 95       	com	r24
     8a6:	82 23       	and	r24, r18
     8a8:	8b bb       	out	0x1b, r24	; 27
     8aa:	08 95       	ret
     8ac:	41 30       	cpi	r20, 0x01	; 1
     8ae:	59 f4       	brne	.+22     	; 0x8c6 <pin_write+0x64>
     8b0:	28 b3       	in	r18, 0x18	; 24
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <pin_write+0x5a>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	6a 95       	dec	r22
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <pin_write+0x56>
     8c0:	82 2b       	or	r24, r18
     8c2:	88 bb       	out	0x18, r24	; 24
     8c4:	08 95       	ret
     8c6:	28 b3       	in	r18, 0x18	; 24
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <pin_write+0x70>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	6a 95       	dec	r22
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <pin_write+0x6c>
     8d6:	80 95       	com	r24
     8d8:	82 23       	and	r24, r18
     8da:	88 bb       	out	0x18, r24	; 24
     8dc:	08 95       	ret
     8de:	41 30       	cpi	r20, 0x01	; 1
     8e0:	59 f4       	brne	.+22     	; 0x8f8 <pin_write+0x96>
     8e2:	25 b3       	in	r18, 0x15	; 21
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <pin_write+0x8c>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	6a 95       	dec	r22
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <pin_write+0x88>
     8f2:	82 2b       	or	r24, r18
     8f4:	85 bb       	out	0x15, r24	; 21
     8f6:	08 95       	ret
     8f8:	25 b3       	in	r18, 0x15	; 21
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <pin_write+0xa2>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	6a 95       	dec	r22
     906:	e2 f7       	brpl	.-8      	; 0x900 <pin_write+0x9e>
     908:	80 95       	com	r24
     90a:	82 23       	and	r24, r18
     90c:	85 bb       	out	0x15, r24	; 21
     90e:	08 95       	ret
     910:	41 30       	cpi	r20, 0x01	; 1
     912:	59 f4       	brne	.+22     	; 0x92a <pin_write+0xc8>
     914:	22 b3       	in	r18, 0x12	; 18
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <pin_write+0xbe>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	6a 95       	dec	r22
     922:	e2 f7       	brpl	.-8      	; 0x91c <pin_write+0xba>
     924:	82 2b       	or	r24, r18
     926:	82 bb       	out	0x12, r24	; 18
     928:	08 95       	ret
     92a:	22 b3       	in	r18, 0x12	; 18
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 c0       	rjmp	.+4      	; 0x936 <pin_write+0xd4>
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	6a 95       	dec	r22
     938:	e2 f7       	brpl	.-8      	; 0x932 <pin_write+0xd0>
     93a:	80 95       	com	r24
     93c:	82 23       	and	r24, r18
     93e:	82 bb       	out	0x12, r24	; 18
     940:	08 95       	ret

00000942 <pin_read>:
     942:	82 34       	cpi	r24, 0x42	; 66
     944:	e9 f0       	breq	.+58     	; 0x980 <pin_read+0x3e>
     946:	18 f4       	brcc	.+6      	; 0x94e <pin_read+0xc>
     948:	81 34       	cpi	r24, 0x41	; 65
     94a:	31 f0       	breq	.+12     	; 0x958 <pin_read+0x16>
     94c:	55 c0       	rjmp	.+170    	; 0x9f8 <pin_read+0xb6>
     94e:	83 34       	cpi	r24, 0x43	; 67
     950:	59 f1       	breq	.+86     	; 0x9a8 <pin_read+0x66>
     952:	84 34       	cpi	r24, 0x44	; 68
     954:	e9 f1       	breq	.+122    	; 0x9d0 <pin_read+0x8e>
     956:	50 c0       	rjmp	.+160    	; 0x9f8 <pin_read+0xb6>
     958:	49 b3       	in	r20, 0x19	; 25
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9c 01       	movw	r18, r24
     960:	06 2e       	mov	r0, r22
     962:	02 c0       	rjmp	.+4      	; 0x968 <pin_read+0x26>
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	0a 94       	dec	r0
     96a:	e2 f7       	brpl	.-8      	; 0x964 <pin_read+0x22>
     96c:	84 2f       	mov	r24, r20
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	82 23       	and	r24, r18
     972:	93 23       	and	r25, r19
     974:	02 c0       	rjmp	.+4      	; 0x97a <pin_read+0x38>
     976:	95 95       	asr	r25
     978:	87 95       	ror	r24
     97a:	6a 95       	dec	r22
     97c:	e2 f7       	brpl	.-8      	; 0x976 <pin_read+0x34>
     97e:	08 95       	ret
     980:	46 b3       	in	r20, 0x16	; 22
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	9c 01       	movw	r18, r24
     988:	06 2e       	mov	r0, r22
     98a:	02 c0       	rjmp	.+4      	; 0x990 <pin_read+0x4e>
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	0a 94       	dec	r0
     992:	e2 f7       	brpl	.-8      	; 0x98c <pin_read+0x4a>
     994:	84 2f       	mov	r24, r20
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	82 23       	and	r24, r18
     99a:	93 23       	and	r25, r19
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <pin_read+0x60>
     99e:	95 95       	asr	r25
     9a0:	87 95       	ror	r24
     9a2:	6a 95       	dec	r22
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <pin_read+0x5c>
     9a6:	08 95       	ret
     9a8:	43 b3       	in	r20, 0x13	; 19
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	9c 01       	movw	r18, r24
     9b0:	06 2e       	mov	r0, r22
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <pin_read+0x76>
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	0a 94       	dec	r0
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <pin_read+0x72>
     9bc:	84 2f       	mov	r24, r20
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	82 23       	and	r24, r18
     9c2:	93 23       	and	r25, r19
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <pin_read+0x88>
     9c6:	95 95       	asr	r25
     9c8:	87 95       	ror	r24
     9ca:	6a 95       	dec	r22
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <pin_read+0x84>
     9ce:	08 95       	ret
     9d0:	40 b3       	in	r20, 0x10	; 16
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 01       	movw	r18, r24
     9d8:	06 2e       	mov	r0, r22
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <pin_read+0x9e>
     9dc:	22 0f       	add	r18, r18
     9de:	33 1f       	adc	r19, r19
     9e0:	0a 94       	dec	r0
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <pin_read+0x9a>
     9e4:	84 2f       	mov	r24, r20
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	82 23       	and	r24, r18
     9ea:	93 23       	and	r25, r19
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <pin_read+0xb0>
     9ee:	95 95       	asr	r25
     9f0:	87 95       	ror	r24
     9f2:	6a 95       	dec	r22
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <pin_read+0xac>
     9f6:	08 95       	ret
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	08 95       	ret

000009fc <port_nibble_init>:
     9fc:	82 34       	cpi	r24, 0x42	; 66
     9fe:	01 f1       	breq	.+64     	; 0xa40 <port_nibble_init+0x44>
     a00:	18 f4       	brcc	.+6      	; 0xa08 <port_nibble_init+0xc>
     a02:	81 34       	cpi	r24, 0x41	; 65
     a04:	39 f0       	breq	.+14     	; 0xa14 <port_nibble_init+0x18>
     a06:	08 95       	ret
     a08:	83 34       	cpi	r24, 0x43	; 67
     a0a:	81 f1       	breq	.+96     	; 0xa6c <port_nibble_init+0x70>
     a0c:	84 34       	cpi	r24, 0x44	; 68
     a0e:	09 f4       	brne	.+2      	; 0xa12 <port_nibble_init+0x16>
     a10:	43 c0       	rjmp	.+134    	; 0xa98 <port_nibble_init+0x9c>
     a12:	08 95       	ret
     a14:	61 11       	cpse	r22, r1
     a16:	0a c0       	rjmp	.+20     	; 0xa2c <port_nibble_init+0x30>
     a18:	41 11       	cpse	r20, r1
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <port_nibble_init+0x28>
     a1c:	8a b3       	in	r24, 0x1a	; 26
     a1e:	8f 60       	ori	r24, 0x0F	; 15
     a20:	8a bb       	out	0x1a, r24	; 26
     a22:	08 95       	ret
     a24:	8a b3       	in	r24, 0x1a	; 26
     a26:	80 7f       	andi	r24, 0xF0	; 240
     a28:	8a bb       	out	0x1a, r24	; 26
     a2a:	08 95       	ret
     a2c:	41 11       	cpse	r20, r1
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <port_nibble_init+0x3c>
     a30:	8a b3       	in	r24, 0x1a	; 26
     a32:	80 6f       	ori	r24, 0xF0	; 240
     a34:	8a bb       	out	0x1a, r24	; 26
     a36:	08 95       	ret
     a38:	8a b3       	in	r24, 0x1a	; 26
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	8a bb       	out	0x1a, r24	; 26
     a3e:	08 95       	ret
     a40:	61 11       	cpse	r22, r1
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <port_nibble_init+0x5c>
     a44:	41 11       	cpse	r20, r1
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <port_nibble_init+0x54>
     a48:	87 b3       	in	r24, 0x17	; 23
     a4a:	8f 60       	ori	r24, 0x0F	; 15
     a4c:	87 bb       	out	0x17, r24	; 23
     a4e:	08 95       	ret
     a50:	87 b3       	in	r24, 0x17	; 23
     a52:	80 7f       	andi	r24, 0xF0	; 240
     a54:	87 bb       	out	0x17, r24	; 23
     a56:	08 95       	ret
     a58:	41 11       	cpse	r20, r1
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <port_nibble_init+0x68>
     a5c:	87 b3       	in	r24, 0x17	; 23
     a5e:	80 6f       	ori	r24, 0xF0	; 240
     a60:	87 bb       	out	0x17, r24	; 23
     a62:	08 95       	ret
     a64:	87 b3       	in	r24, 0x17	; 23
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	87 bb       	out	0x17, r24	; 23
     a6a:	08 95       	ret
     a6c:	61 11       	cpse	r22, r1
     a6e:	0a c0       	rjmp	.+20     	; 0xa84 <port_nibble_init+0x88>
     a70:	41 11       	cpse	r20, r1
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <port_nibble_init+0x80>
     a74:	84 b3       	in	r24, 0x14	; 20
     a76:	8f 60       	ori	r24, 0x0F	; 15
     a78:	84 bb       	out	0x14, r24	; 20
     a7a:	08 95       	ret
     a7c:	84 b3       	in	r24, 0x14	; 20
     a7e:	80 7f       	andi	r24, 0xF0	; 240
     a80:	84 bb       	out	0x14, r24	; 20
     a82:	08 95       	ret
     a84:	41 11       	cpse	r20, r1
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <port_nibble_init+0x94>
     a88:	84 b3       	in	r24, 0x14	; 20
     a8a:	80 6f       	ori	r24, 0xF0	; 240
     a8c:	84 bb       	out	0x14, r24	; 20
     a8e:	08 95       	ret
     a90:	84 b3       	in	r24, 0x14	; 20
     a92:	8f 70       	andi	r24, 0x0F	; 15
     a94:	84 bb       	out	0x14, r24	; 20
     a96:	08 95       	ret
     a98:	61 11       	cpse	r22, r1
     a9a:	0a c0       	rjmp	.+20     	; 0xab0 <port_nibble_init+0xb4>
     a9c:	41 11       	cpse	r20, r1
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <port_nibble_init+0xac>
     aa0:	81 b3       	in	r24, 0x11	; 17
     aa2:	8f 60       	ori	r24, 0x0F	; 15
     aa4:	81 bb       	out	0x11, r24	; 17
     aa6:	08 95       	ret
     aa8:	81 b3       	in	r24, 0x11	; 17
     aaa:	80 7f       	andi	r24, 0xF0	; 240
     aac:	81 bb       	out	0x11, r24	; 17
     aae:	08 95       	ret
     ab0:	41 11       	cpse	r20, r1
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <port_nibble_init+0xc0>
     ab4:	81 b3       	in	r24, 0x11	; 17
     ab6:	80 6f       	ori	r24, 0xF0	; 240
     ab8:	81 bb       	out	0x11, r24	; 17
     aba:	08 95       	ret
     abc:	81 b3       	in	r24, 0x11	; 17
     abe:	8f 70       	andi	r24, 0x0F	; 15
     ac0:	81 bb       	out	0x11, r24	; 17
     ac2:	08 95       	ret

00000ac4 <port_nibble_write>:
     ac4:	82 34       	cpi	r24, 0x42	; 66
     ac6:	d9 f0       	breq	.+54     	; 0xafe <port_nibble_write+0x3a>
     ac8:	18 f4       	brcc	.+6      	; 0xad0 <port_nibble_write+0xc>
     aca:	81 34       	cpi	r24, 0x41	; 65
     acc:	31 f0       	breq	.+12     	; 0xada <port_nibble_write+0x16>
     ace:	08 95       	ret
     ad0:	83 34       	cpi	r24, 0x43	; 67
     ad2:	39 f1       	breq	.+78     	; 0xb22 <port_nibble_write+0x5e>
     ad4:	84 34       	cpi	r24, 0x44	; 68
     ad6:	b9 f1       	breq	.+110    	; 0xb46 <port_nibble_write+0x82>
     ad8:	08 95       	ret
     ada:	61 11       	cpse	r22, r1
     adc:	07 c0       	rjmp	.+14     	; 0xaec <port_nibble_write+0x28>
     ade:	8b b3       	in	r24, 0x1b	; 27
     ae0:	80 7f       	andi	r24, 0xF0	; 240
     ae2:	8b bb       	out	0x1b, r24	; 27
     ae4:	8b b3       	in	r24, 0x1b	; 27
     ae6:	48 2b       	or	r20, r24
     ae8:	4b bb       	out	0x1b, r20	; 27
     aea:	08 95       	ret
     aec:	42 95       	swap	r20
     aee:	40 7f       	andi	r20, 0xF0	; 240
     af0:	8b b3       	in	r24, 0x1b	; 27
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	8b bb       	out	0x1b, r24	; 27
     af6:	8b b3       	in	r24, 0x1b	; 27
     af8:	48 2b       	or	r20, r24
     afa:	4b bb       	out	0x1b, r20	; 27
     afc:	08 95       	ret
     afe:	61 11       	cpse	r22, r1
     b00:	07 c0       	rjmp	.+14     	; 0xb10 <port_nibble_write+0x4c>
     b02:	88 b3       	in	r24, 0x18	; 24
     b04:	80 7f       	andi	r24, 0xF0	; 240
     b06:	88 bb       	out	0x18, r24	; 24
     b08:	88 b3       	in	r24, 0x18	; 24
     b0a:	48 2b       	or	r20, r24
     b0c:	48 bb       	out	0x18, r20	; 24
     b0e:	08 95       	ret
     b10:	42 95       	swap	r20
     b12:	40 7f       	andi	r20, 0xF0	; 240
     b14:	88 b3       	in	r24, 0x18	; 24
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	88 bb       	out	0x18, r24	; 24
     b1a:	88 b3       	in	r24, 0x18	; 24
     b1c:	48 2b       	or	r20, r24
     b1e:	48 bb       	out	0x18, r20	; 24
     b20:	08 95       	ret
     b22:	61 11       	cpse	r22, r1
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <port_nibble_write+0x70>
     b26:	85 b3       	in	r24, 0x15	; 21
     b28:	80 7f       	andi	r24, 0xF0	; 240
     b2a:	85 bb       	out	0x15, r24	; 21
     b2c:	85 b3       	in	r24, 0x15	; 21
     b2e:	48 2b       	or	r20, r24
     b30:	45 bb       	out	0x15, r20	; 21
     b32:	08 95       	ret
     b34:	42 95       	swap	r20
     b36:	40 7f       	andi	r20, 0xF0	; 240
     b38:	85 b3       	in	r24, 0x15	; 21
     b3a:	8f 70       	andi	r24, 0x0F	; 15
     b3c:	85 bb       	out	0x15, r24	; 21
     b3e:	85 b3       	in	r24, 0x15	; 21
     b40:	48 2b       	or	r20, r24
     b42:	45 bb       	out	0x15, r20	; 21
     b44:	08 95       	ret
     b46:	61 11       	cpse	r22, r1
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <port_nibble_write+0x94>
     b4a:	82 b3       	in	r24, 0x12	; 18
     b4c:	80 7f       	andi	r24, 0xF0	; 240
     b4e:	82 bb       	out	0x12, r24	; 18
     b50:	82 b3       	in	r24, 0x12	; 18
     b52:	48 2b       	or	r20, r24
     b54:	42 bb       	out	0x12, r20	; 18
     b56:	08 95       	ret
     b58:	42 95       	swap	r20
     b5a:	40 7f       	andi	r20, 0xF0	; 240
     b5c:	82 b3       	in	r24, 0x12	; 18
     b5e:	8f 70       	andi	r24, 0x0F	; 15
     b60:	82 bb       	out	0x12, r24	; 18
     b62:	82 b3       	in	r24, 0x12	; 18
     b64:	48 2b       	or	r20, r24
     b66:	42 bb       	out	0x12, r20	; 18
     b68:	08 95       	ret

00000b6a <internal_pullup_enable>:
}



void internal_pullup_enable(uint8 port, uint8 pin){
	switch(port){
     b6a:	82 34       	cpi	r24, 0x42	; 66
     b6c:	a1 f0       	breq	.+40     	; 0xb96 <internal_pullup_enable+0x2c>
     b6e:	18 f4       	brcc	.+6      	; 0xb76 <internal_pullup_enable+0xc>
     b70:	81 34       	cpi	r24, 0x41	; 65
     b72:	31 f0       	breq	.+12     	; 0xb80 <internal_pullup_enable+0x16>
     b74:	08 95       	ret
     b76:	83 34       	cpi	r24, 0x43	; 67
     b78:	c9 f0       	breq	.+50     	; 0xbac <internal_pullup_enable+0x42>
     b7a:	84 34       	cpi	r24, 0x44	; 68
     b7c:	11 f1       	breq	.+68     	; 0xbc2 <internal_pullup_enable+0x58>
     b7e:	08 95       	ret
		case PORT_A:
			SET_BIT(PORTA_REG,pin);
     b80:	2b b3       	in	r18, 0x1b	; 27
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <internal_pullup_enable+0x22>
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	6a 95       	dec	r22
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <internal_pullup_enable+0x1e>
     b90:	82 2b       	or	r24, r18
     b92:	8b bb       	out	0x1b, r24	; 27
			break;
     b94:	08 95       	ret
		case PORT_B:
			SET_BIT(PORTB_REG,pin);
     b96:	28 b3       	in	r18, 0x18	; 24
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <internal_pullup_enable+0x38>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	6a 95       	dec	r22
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <internal_pullup_enable+0x34>
     ba6:	82 2b       	or	r24, r18
     ba8:	88 bb       	out	0x18, r24	; 24
			break;
     baa:	08 95       	ret
		case PORT_C:
			SET_BIT(PORTC_REG,pin);
     bac:	25 b3       	in	r18, 0x15	; 21
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <internal_pullup_enable+0x4e>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	6a 95       	dec	r22
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <internal_pullup_enable+0x4a>
     bbc:	82 2b       	or	r24, r18
     bbe:	85 bb       	out	0x15, r24	; 21
			break;
     bc0:	08 95       	ret
		case PORT_D:
			SET_BIT(PORTD_REG,pin);
     bc2:	22 b3       	in	r18, 0x12	; 18
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <internal_pullup_enable+0x64>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	6a 95       	dec	r22
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <internal_pullup_enable+0x60>
     bd2:	82 2b       	or	r24, r18
     bd4:	82 bb       	out	0x12, r24	; 18
     bd6:	08 95       	ret

00000bd8 <global_interrupt_enable>:
			break;
			case(INT1_t):
			CLR_BIT(GICR_REG,INT1_BIT);
			break;
			case(INT2_t):
			CLR_BIT(GICR_REG,INT2_BIT);
     bd8:	8f b7       	in	r24, 0x3f	; 63
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	8f bf       	out	0x3f, r24	; 63
     bde:	08 95       	ret

00000be0 <external_interrupt_enable>:
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	61 f1       	breq	.+88     	; 0xc3c <external_interrupt_enable+0x5c>
     be4:	20 f0       	brcs	.+8      	; 0xbee <external_interrupt_enable+0xe>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	09 f4       	brne	.+2      	; 0xbec <external_interrupt_enable+0xc>
     bea:	4f c0       	rjmp	.+158    	; 0xc8a <external_interrupt_enable+0xaa>
     bec:	08 95       	ret
     bee:	61 30       	cpi	r22, 0x01	; 1
     bf0:	69 f0       	breq	.+26     	; 0xc0c <external_interrupt_enable+0x2c>
     bf2:	28 f0       	brcs	.+10     	; 0xbfe <external_interrupt_enable+0x1e>
     bf4:	62 30       	cpi	r22, 0x02	; 2
     bf6:	c1 f0       	breq	.+48     	; 0xc28 <external_interrupt_enable+0x48>
     bf8:	63 30       	cpi	r22, 0x03	; 3
     bfa:	79 f0       	breq	.+30     	; 0xc1a <external_interrupt_enable+0x3a>
     bfc:	1b c0       	rjmp	.+54     	; 0xc34 <external_interrupt_enable+0x54>
     bfe:	85 b7       	in	r24, 0x35	; 53
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	85 bf       	out	0x35, r24	; 53
     c04:	85 b7       	in	r24, 0x35	; 53
     c06:	8d 7f       	andi	r24, 0xFD	; 253
     c08:	85 bf       	out	0x35, r24	; 53
     c0a:	14 c0       	rjmp	.+40     	; 0xc34 <external_interrupt_enable+0x54>
     c0c:	85 b7       	in	r24, 0x35	; 53
     c0e:	81 60       	ori	r24, 0x01	; 1
     c10:	85 bf       	out	0x35, r24	; 53
     c12:	85 b7       	in	r24, 0x35	; 53
     c14:	8d 7f       	andi	r24, 0xFD	; 253
     c16:	85 bf       	out	0x35, r24	; 53
     c18:	0d c0       	rjmp	.+26     	; 0xc34 <external_interrupt_enable+0x54>
     c1a:	85 b7       	in	r24, 0x35	; 53
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	85 bf       	out	0x35, r24	; 53
     c20:	85 b7       	in	r24, 0x35	; 53
     c22:	82 60       	ori	r24, 0x02	; 2
     c24:	85 bf       	out	0x35, r24	; 53
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <external_interrupt_enable+0x54>
     c28:	85 b7       	in	r24, 0x35	; 53
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	85 bf       	out	0x35, r24	; 53
     c2e:	85 b7       	in	r24, 0x35	; 53
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	85 bf       	out	0x35, r24	; 53
     c34:	8b b7       	in	r24, 0x3b	; 59
     c36:	80 64       	ori	r24, 0x40	; 64
     c38:	8b bf       	out	0x3b, r24	; 59
     c3a:	08 95       	ret
     c3c:	61 30       	cpi	r22, 0x01	; 1
     c3e:	69 f0       	breq	.+26     	; 0xc5a <external_interrupt_enable+0x7a>
     c40:	28 f0       	brcs	.+10     	; 0xc4c <external_interrupt_enable+0x6c>
     c42:	62 30       	cpi	r22, 0x02	; 2
     c44:	c1 f0       	breq	.+48     	; 0xc76 <external_interrupt_enable+0x96>
     c46:	63 30       	cpi	r22, 0x03	; 3
     c48:	79 f0       	breq	.+30     	; 0xc68 <external_interrupt_enable+0x88>
     c4a:	1b c0       	rjmp	.+54     	; 0xc82 <external_interrupt_enable+0xa2>
     c4c:	85 b7       	in	r24, 0x35	; 53
     c4e:	8b 7f       	andi	r24, 0xFB	; 251
     c50:	85 bf       	out	0x35, r24	; 53
     c52:	85 b7       	in	r24, 0x35	; 53
     c54:	87 7f       	andi	r24, 0xF7	; 247
     c56:	85 bf       	out	0x35, r24	; 53
     c58:	14 c0       	rjmp	.+40     	; 0xc82 <external_interrupt_enable+0xa2>
     c5a:	85 b7       	in	r24, 0x35	; 53
     c5c:	84 60       	ori	r24, 0x04	; 4
     c5e:	85 bf       	out	0x35, r24	; 53
     c60:	85 b7       	in	r24, 0x35	; 53
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	85 bf       	out	0x35, r24	; 53
     c66:	0d c0       	rjmp	.+26     	; 0xc82 <external_interrupt_enable+0xa2>
     c68:	85 b7       	in	r24, 0x35	; 53
     c6a:	8b 7f       	andi	r24, 0xFB	; 251
     c6c:	85 bf       	out	0x35, r24	; 53
     c6e:	85 b7       	in	r24, 0x35	; 53
     c70:	88 60       	ori	r24, 0x08	; 8
     c72:	85 bf       	out	0x35, r24	; 53
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <external_interrupt_enable+0xa2>
     c76:	85 b7       	in	r24, 0x35	; 53
     c78:	84 60       	ori	r24, 0x04	; 4
     c7a:	85 bf       	out	0x35, r24	; 53
     c7c:	85 b7       	in	r24, 0x35	; 53
     c7e:	88 60       	ori	r24, 0x08	; 8
     c80:	85 bf       	out	0x35, r24	; 53
     c82:	8b b7       	in	r24, 0x3b	; 59
     c84:	80 68       	ori	r24, 0x80	; 128
     c86:	8b bf       	out	0x3b, r24	; 59
     c88:	08 95       	ret
     c8a:	62 30       	cpi	r22, 0x02	; 2
     c8c:	31 f0       	breq	.+12     	; 0xc9a <external_interrupt_enable+0xba>
     c8e:	63 30       	cpi	r22, 0x03	; 3
     c90:	39 f4       	brne	.+14     	; 0xca0 <external_interrupt_enable+0xc0>
     c92:	84 b7       	in	r24, 0x34	; 52
     c94:	8f 7b       	andi	r24, 0xBF	; 191
     c96:	84 bf       	out	0x34, r24	; 52
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <external_interrupt_enable+0xc0>
     c9a:	84 b7       	in	r24, 0x34	; 52
     c9c:	80 64       	ori	r24, 0x40	; 64
     c9e:	84 bf       	out	0x34, r24	; 52
     ca0:	8b b7       	in	r24, 0x3b	; 59
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	8b bf       	out	0x3b, r24	; 59
     ca6:	08 95       	ret

00000ca8 <external_interrupt_callback>:
/*
Setting the callback function for a given interrupt and the corresponding function to be executed upon calling
*/

void external_interrupt_callback(uint8 interrupt_name, void (*callback) (void) ){
	switch(interrupt_name){
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	49 f0       	breq	.+18     	; 0xcbe <external_interrupt_callback+0x16>
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <external_interrupt_callback+0xc>
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	59 f0       	breq	.+22     	; 0xcc8 <external_interrupt_callback+0x20>
     cb2:	08 95       	ret
		case INT0_t:
		external_interrupt_0_callback=callback;
     cb4:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <external_interrupt_0_callback+0x1>
     cb8:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <external_interrupt_0_callback>
		break;
     cbc:	08 95       	ret
		case INT1_t:
		external_interrupt_1_callback=callback;
     cbe:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <external_interrupt_1_callback+0x1>
     cc2:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <external_interrupt_1_callback>
		break;
     cc6:	08 95       	ret
		case INT2_t:
		external_interrupt_2_callback=callback;
     cc8:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <external_interrupt_2_callback+0x1>
     ccc:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <external_interrupt_2_callback>
     cd0:	08 95       	ret

00000cd2 <__vector_1>:
		break;
	}
}


ISR(INT0_vect){
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
	external_interrupt_0_callback();
     cf4:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <external_interrupt_0_callback>
     cf8:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <external_interrupt_0_callback+0x1>
     cfc:	09 95       	icall
}
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_2>:

ISR(INT1_vect){
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
	external_interrupt_1_callback();
     d42:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <external_interrupt_1_callback>
     d46:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <external_interrupt_1_callback+0x1>
     d4a:	09 95       	icall
}
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_3>:

ISR(INT2_vect){
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
	external_interrupt_2_callback();
     d90:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <external_interrupt_2_callback>
     d94:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <external_interrupt_2_callback+0x1>
     d98:	09 95       	icall
}
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__fixsfsi>:
     dbc:	0e 94 e5 06 	call	0xdca	; 0xdca <__fixunssfsi>
     dc0:	68 94       	set
     dc2:	b1 11       	cpse	r27, r1
     dc4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__fp_szero>
     dc8:	08 95       	ret

00000dca <__fixunssfsi>:
     dca:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fp_splitA>
     dce:	88 f0       	brcs	.+34     	; 0xdf2 <__fixunssfsi+0x28>
     dd0:	9f 57       	subi	r25, 0x7F	; 127
     dd2:	98 f0       	brcs	.+38     	; 0xdfa <__fixunssfsi+0x30>
     dd4:	b9 2f       	mov	r27, r25
     dd6:	99 27       	eor	r25, r25
     dd8:	b7 51       	subi	r27, 0x17	; 23
     dda:	b0 f0       	brcs	.+44     	; 0xe08 <__fixunssfsi+0x3e>
     ddc:	e1 f0       	breq	.+56     	; 0xe16 <__fixunssfsi+0x4c>
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	88 1f       	adc	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	1a f0       	brmi	.+6      	; 0xdee <__fixunssfsi+0x24>
     de8:	ba 95       	dec	r27
     dea:	c9 f7       	brne	.-14     	; 0xdde <__fixunssfsi+0x14>
     dec:	14 c0       	rjmp	.+40     	; 0xe16 <__fixunssfsi+0x4c>
     dee:	b1 30       	cpi	r27, 0x01	; 1
     df0:	91 f0       	breq	.+36     	; 0xe16 <__fixunssfsi+0x4c>
     df2:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_zero>
     df6:	b1 e0       	ldi	r27, 0x01	; 1
     df8:	08 95       	ret
     dfa:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__fp_zero>
     dfe:	67 2f       	mov	r22, r23
     e00:	78 2f       	mov	r23, r24
     e02:	88 27       	eor	r24, r24
     e04:	b8 5f       	subi	r27, 0xF8	; 248
     e06:	39 f0       	breq	.+14     	; 0xe16 <__fixunssfsi+0x4c>
     e08:	b9 3f       	cpi	r27, 0xF9	; 249
     e0a:	cc f3       	brlt	.-14     	; 0xdfe <__fixunssfsi+0x34>
     e0c:	86 95       	lsr	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b3 95       	inc	r27
     e14:	d9 f7       	brne	.-10     	; 0xe0c <__fixunssfsi+0x42>
     e16:	3e f4       	brtc	.+14     	; 0xe26 <__fixunssfsi+0x5c>
     e18:	90 95       	com	r25
     e1a:	80 95       	com	r24
     e1c:	70 95       	com	r23
     e1e:	61 95       	neg	r22
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	8f 4f       	sbci	r24, 0xFF	; 255
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	08 95       	ret

00000e28 <__floatunsisf>:
     e28:	e8 94       	clt
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <__floatsisf+0x12>

00000e2c <__floatsisf>:
     e2c:	97 fb       	bst	r25, 7
     e2e:	3e f4       	brtc	.+14     	; 0xe3e <__floatsisf+0x12>
     e30:	90 95       	com	r25
     e32:	80 95       	com	r24
     e34:	70 95       	com	r23
     e36:	61 95       	neg	r22
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	8f 4f       	sbci	r24, 0xFF	; 255
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	99 23       	and	r25, r25
     e40:	a9 f0       	breq	.+42     	; 0xe6c <__floatsisf+0x40>
     e42:	f9 2f       	mov	r31, r25
     e44:	96 e9       	ldi	r25, 0x96	; 150
     e46:	bb 27       	eor	r27, r27
     e48:	93 95       	inc	r25
     e4a:	f6 95       	lsr	r31
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b7 95       	ror	r27
     e54:	f1 11       	cpse	r31, r1
     e56:	f8 cf       	rjmp	.-16     	; 0xe48 <__floatsisf+0x1c>
     e58:	fa f4       	brpl	.+62     	; 0xe98 <__floatsisf+0x6c>
     e5a:	bb 0f       	add	r27, r27
     e5c:	11 f4       	brne	.+4      	; 0xe62 <__floatsisf+0x36>
     e5e:	60 ff       	sbrs	r22, 0
     e60:	1b c0       	rjmp	.+54     	; 0xe98 <__floatsisf+0x6c>
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	16 c0       	rjmp	.+44     	; 0xe98 <__floatsisf+0x6c>
     e6c:	88 23       	and	r24, r24
     e6e:	11 f0       	breq	.+4      	; 0xe74 <__floatsisf+0x48>
     e70:	96 e9       	ldi	r25, 0x96	; 150
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <__floatsisf+0x6a>
     e74:	77 23       	and	r23, r23
     e76:	21 f0       	breq	.+8      	; 0xe80 <__floatsisf+0x54>
     e78:	9e e8       	ldi	r25, 0x8E	; 142
     e7a:	87 2f       	mov	r24, r23
     e7c:	76 2f       	mov	r23, r22
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <__floatsisf+0x5e>
     e80:	66 23       	and	r22, r22
     e82:	71 f0       	breq	.+28     	; 0xea0 <__floatsisf+0x74>
     e84:	96 e8       	ldi	r25, 0x86	; 134
     e86:	86 2f       	mov	r24, r22
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	2a f0       	brmi	.+10     	; 0xe98 <__floatsisf+0x6c>
     e8e:	9a 95       	dec	r25
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	da f7       	brpl	.-10     	; 0xe8e <__floatsisf+0x62>
     e98:	88 0f       	add	r24, r24
     e9a:	96 95       	lsr	r25
     e9c:	87 95       	ror	r24
     e9e:	97 f9       	bld	r25, 7
     ea0:	08 95       	ret

00000ea2 <__fp_split3>:
     ea2:	57 fd       	sbrc	r21, 7
     ea4:	90 58       	subi	r25, 0x80	; 128
     ea6:	44 0f       	add	r20, r20
     ea8:	55 1f       	adc	r21, r21
     eaa:	59 f0       	breq	.+22     	; 0xec2 <__fp_splitA+0x10>
     eac:	5f 3f       	cpi	r21, 0xFF	; 255
     eae:	71 f0       	breq	.+28     	; 0xecc <__fp_splitA+0x1a>
     eb0:	47 95       	ror	r20

00000eb2 <__fp_splitA>:
     eb2:	88 0f       	add	r24, r24
     eb4:	97 fb       	bst	r25, 7
     eb6:	99 1f       	adc	r25, r25
     eb8:	61 f0       	breq	.+24     	; 0xed2 <__fp_splitA+0x20>
     eba:	9f 3f       	cpi	r25, 0xFF	; 255
     ebc:	79 f0       	breq	.+30     	; 0xedc <__fp_splitA+0x2a>
     ebe:	87 95       	ror	r24
     ec0:	08 95       	ret
     ec2:	12 16       	cp	r1, r18
     ec4:	13 06       	cpc	r1, r19
     ec6:	14 06       	cpc	r1, r20
     ec8:	55 1f       	adc	r21, r21
     eca:	f2 cf       	rjmp	.-28     	; 0xeb0 <__fp_split3+0xe>
     ecc:	46 95       	lsr	r20
     ece:	f1 df       	rcall	.-30     	; 0xeb2 <__fp_splitA>
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <__fp_splitA+0x30>
     ed2:	16 16       	cp	r1, r22
     ed4:	17 06       	cpc	r1, r23
     ed6:	18 06       	cpc	r1, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	f1 cf       	rjmp	.-30     	; 0xebe <__fp_splitA+0xc>
     edc:	86 95       	lsr	r24
     ede:	71 05       	cpc	r23, r1
     ee0:	61 05       	cpc	r22, r1
     ee2:	08 94       	sec
     ee4:	08 95       	ret

00000ee6 <__fp_zero>:
     ee6:	e8 94       	clt

00000ee8 <__fp_szero>:
     ee8:	bb 27       	eor	r27, r27
     eea:	66 27       	eor	r22, r22
     eec:	77 27       	eor	r23, r23
     eee:	cb 01       	movw	r24, r22
     ef0:	97 f9       	bld	r25, 7
     ef2:	08 95       	ret

00000ef4 <__mulsf3>:
     ef4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__mulsf3x>
     ef8:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__fp_round>
     efc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_pscA>
     f00:	38 f0       	brcs	.+14     	; 0xf10 <__mulsf3+0x1c>
     f02:	0e 94 f7 07 	call	0xfee	; 0xfee <__fp_pscB>
     f06:	20 f0       	brcs	.+8      	; 0xf10 <__mulsf3+0x1c>
     f08:	95 23       	and	r25, r21
     f0a:	11 f0       	breq	.+4      	; 0xf10 <__mulsf3+0x1c>
     f0c:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_inf>
     f10:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_nan>
     f14:	11 24       	eor	r1, r1
     f16:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__fp_szero>

00000f1a <__mulsf3x>:
     f1a:	0e 94 51 07 	call	0xea2	; 0xea2 <__fp_split3>
     f1e:	70 f3       	brcs	.-36     	; 0xefc <__mulsf3+0x8>

00000f20 <__mulsf3_pse>:
     f20:	95 9f       	mul	r25, r21
     f22:	c1 f3       	breq	.-16     	; 0xf14 <__mulsf3+0x20>
     f24:	95 0f       	add	r25, r21
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	55 1f       	adc	r21, r21
     f2a:	62 9f       	mul	r22, r18
     f2c:	f0 01       	movw	r30, r0
     f2e:	72 9f       	mul	r23, r18
     f30:	bb 27       	eor	r27, r27
     f32:	f0 0d       	add	r31, r0
     f34:	b1 1d       	adc	r27, r1
     f36:	63 9f       	mul	r22, r19
     f38:	aa 27       	eor	r26, r26
     f3a:	f0 0d       	add	r31, r0
     f3c:	b1 1d       	adc	r27, r1
     f3e:	aa 1f       	adc	r26, r26
     f40:	64 9f       	mul	r22, r20
     f42:	66 27       	eor	r22, r22
     f44:	b0 0d       	add	r27, r0
     f46:	a1 1d       	adc	r26, r1
     f48:	66 1f       	adc	r22, r22
     f4a:	82 9f       	mul	r24, r18
     f4c:	22 27       	eor	r18, r18
     f4e:	b0 0d       	add	r27, r0
     f50:	a1 1d       	adc	r26, r1
     f52:	62 1f       	adc	r22, r18
     f54:	73 9f       	mul	r23, r19
     f56:	b0 0d       	add	r27, r0
     f58:	a1 1d       	adc	r26, r1
     f5a:	62 1f       	adc	r22, r18
     f5c:	83 9f       	mul	r24, r19
     f5e:	a0 0d       	add	r26, r0
     f60:	61 1d       	adc	r22, r1
     f62:	22 1f       	adc	r18, r18
     f64:	74 9f       	mul	r23, r20
     f66:	33 27       	eor	r19, r19
     f68:	a0 0d       	add	r26, r0
     f6a:	61 1d       	adc	r22, r1
     f6c:	23 1f       	adc	r18, r19
     f6e:	84 9f       	mul	r24, r20
     f70:	60 0d       	add	r22, r0
     f72:	21 1d       	adc	r18, r1
     f74:	82 2f       	mov	r24, r18
     f76:	76 2f       	mov	r23, r22
     f78:	6a 2f       	mov	r22, r26
     f7a:	11 24       	eor	r1, r1
     f7c:	9f 57       	subi	r25, 0x7F	; 127
     f7e:	50 40       	sbci	r21, 0x00	; 0
     f80:	9a f0       	brmi	.+38     	; 0xfa8 <__mulsf3_pse+0x88>
     f82:	f1 f0       	breq	.+60     	; 0xfc0 <__mulsf3_pse+0xa0>
     f84:	88 23       	and	r24, r24
     f86:	4a f0       	brmi	.+18     	; 0xf9a <__mulsf3_pse+0x7a>
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	bb 1f       	adc	r27, r27
     f8e:	66 1f       	adc	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	91 50       	subi	r25, 0x01	; 1
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	a9 f7       	brne	.-22     	; 0xf84 <__mulsf3_pse+0x64>
     f9a:	9e 3f       	cpi	r25, 0xFE	; 254
     f9c:	51 05       	cpc	r21, r1
     f9e:	80 f0       	brcs	.+32     	; 0xfc0 <__mulsf3_pse+0xa0>
     fa0:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_inf>
     fa4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__fp_szero>
     fa8:	5f 3f       	cpi	r21, 0xFF	; 255
     faa:	e4 f3       	brlt	.-8      	; 0xfa4 <__mulsf3_pse+0x84>
     fac:	98 3e       	cpi	r25, 0xE8	; 232
     fae:	d4 f3       	brlt	.-12     	; 0xfa4 <__mulsf3_pse+0x84>
     fb0:	86 95       	lsr	r24
     fb2:	77 95       	ror	r23
     fb4:	67 95       	ror	r22
     fb6:	b7 95       	ror	r27
     fb8:	f7 95       	ror	r31
     fba:	e7 95       	ror	r30
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	c1 f7       	brne	.-16     	; 0xfb0 <__mulsf3_pse+0x90>
     fc0:	fe 2b       	or	r31, r30
     fc2:	88 0f       	add	r24, r24
     fc4:	91 1d       	adc	r25, r1
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	97 f9       	bld	r25, 7
     fcc:	08 95       	ret

00000fce <__fp_inf>:
     fce:	97 f9       	bld	r25, 7
     fd0:	9f 67       	ori	r25, 0x7F	; 127
     fd2:	80 e8       	ldi	r24, 0x80	; 128
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	08 95       	ret

00000fda <__fp_nan>:
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	08 95       	ret

00000fe0 <__fp_pscA>:
     fe0:	00 24       	eor	r0, r0
     fe2:	0a 94       	dec	r0
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	18 06       	cpc	r1, r24
     fea:	09 06       	cpc	r0, r25
     fec:	08 95       	ret

00000fee <__fp_pscB>:
     fee:	00 24       	eor	r0, r0
     ff0:	0a 94       	dec	r0
     ff2:	12 16       	cp	r1, r18
     ff4:	13 06       	cpc	r1, r19
     ff6:	14 06       	cpc	r1, r20
     ff8:	05 06       	cpc	r0, r21
     ffa:	08 95       	ret

00000ffc <__fp_round>:
     ffc:	09 2e       	mov	r0, r25
     ffe:	03 94       	inc	r0
    1000:	00 0c       	add	r0, r0
    1002:	11 f4       	brne	.+4      	; 0x1008 <__fp_round+0xc>
    1004:	88 23       	and	r24, r24
    1006:	52 f0       	brmi	.+20     	; 0x101c <__fp_round+0x20>
    1008:	bb 0f       	add	r27, r27
    100a:	40 f4       	brcc	.+16     	; 0x101c <__fp_round+0x20>
    100c:	bf 2b       	or	r27, r31
    100e:	11 f4       	brne	.+4      	; 0x1014 <__fp_round+0x18>
    1010:	60 ff       	sbrs	r22, 0
    1012:	04 c0       	rjmp	.+8      	; 0x101c <__fp_round+0x20>
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	08 95       	ret

0000101e <__divmodhi4>:
    101e:	97 fb       	bst	r25, 7
    1020:	07 2e       	mov	r0, r23
    1022:	16 f4       	brtc	.+4      	; 0x1028 <__divmodhi4+0xa>
    1024:	00 94       	com	r0
    1026:	07 d0       	rcall	.+14     	; 0x1036 <__divmodhi4_neg1>
    1028:	77 fd       	sbrc	r23, 7
    102a:	09 d0       	rcall	.+18     	; 0x103e <__divmodhi4_neg2>
    102c:	0e 94 23 08 	call	0x1046	; 0x1046 <__udivmodhi4>
    1030:	07 fc       	sbrc	r0, 7
    1032:	05 d0       	rcall	.+10     	; 0x103e <__divmodhi4_neg2>
    1034:	3e f4       	brtc	.+14     	; 0x1044 <__divmodhi4_exit>

00001036 <__divmodhi4_neg1>:
    1036:	90 95       	com	r25
    1038:	81 95       	neg	r24
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	08 95       	ret

0000103e <__divmodhi4_neg2>:
    103e:	70 95       	com	r23
    1040:	61 95       	neg	r22
    1042:	7f 4f       	sbci	r23, 0xFF	; 255

00001044 <__divmodhi4_exit>:
    1044:	08 95       	ret

00001046 <__udivmodhi4>:
    1046:	aa 1b       	sub	r26, r26
    1048:	bb 1b       	sub	r27, r27
    104a:	51 e1       	ldi	r21, 0x11	; 17
    104c:	07 c0       	rjmp	.+14     	; 0x105c <__udivmodhi4_ep>

0000104e <__udivmodhi4_loop>:
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	a6 17       	cp	r26, r22
    1054:	b7 07       	cpc	r27, r23
    1056:	10 f0       	brcs	.+4      	; 0x105c <__udivmodhi4_ep>
    1058:	a6 1b       	sub	r26, r22
    105a:	b7 0b       	sbc	r27, r23

0000105c <__udivmodhi4_ep>:
    105c:	88 1f       	adc	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	5a 95       	dec	r21
    1062:	a9 f7       	brne	.-22     	; 0x104e <__udivmodhi4_loop>
    1064:	80 95       	com	r24
    1066:	90 95       	com	r25
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	08 95       	ret

0000106e <_exit>:
    106e:	f8 94       	cli

00001070 <__stop_program>:
    1070:	ff cf       	rjmp	.-2      	; 0x1070 <__stop_program>
